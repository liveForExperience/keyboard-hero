name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # 代码质量检查
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code 🛎️
      uses: actions/checkout@v4

    - name: Setup Node.js 🔧
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies 📦
      run: npm ci

    - name: Run ESLint 🔍
      run: npm run build 2>&1 | tee build.log || true

    - name: Check build warnings 📋
      run: |
        if grep -q "WARNING" build.log; then
          echo "⚠️ Build completed with warnings"
          grep "WARNING" build.log
        else
          echo "✅ Build completed without warnings"
        fi

  # 构建和测试
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code 🛎️
      uses: actions/checkout@v4

    - name: Setup Node.js 🔧
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies 📦
      run: npm ci

    - name: Run tests 🧪
      run: npm test -- --coverage --watchAll=false --testTimeout=10000
      continue-on-error: true

    - name: Build application 🔨
      run: npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: false
        PUBLIC_URL: /keyboard-hero

    - name: Verify PWA manifest 📱
      run: |
        if [ -f "build/manifest.json" ]; then
          echo "✅ PWA manifest found"
          cat build/manifest.json | jq '.' || echo "JSON parsing failed"
        else
          echo "❌ PWA manifest not found"
          exit 1
        fi

    - name: Verify Service Worker 🔧
      run: |
        if [ -f "build/service-worker.js" ]; then
          echo "✅ Service Worker found"
          head -10 build/service-worker.js
        else
          echo "❌ Service Worker not found"
          exit 1
        fi

    - name: Check build size 📊
      run: |
        echo "📦 Build size analysis:"
        du -sh build/
        echo "📁 Main files:"
        find build/static -name "*.js" -o -name "*.css" 2>/dev/null | head -10 | xargs ls -lh

    - name: Upload build artifacts 📁
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ github.sha }}
        path: build/
        retention-days: 7

  # 部署到 GitHub Pages (使用新的官方方式)
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality-check, build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    # 添加明确的权限声明
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # 指定部署环境
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code 🛎️
      uses: actions/checkout@v4

    - name: Setup Node.js 🔧
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies 📦
      run: npm ci

    - name: Build for production 🏗️
      run: npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: false
        PUBLIC_URL: /keyboard-hero

    - name: Setup Pages 📄
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages 📤
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./build

    - name: Deploy to GitHub Pages 🚀
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Create deployment summary 📋
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://liveForExperience.github.io/keyboard-hero" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Size**: $(du -sh build/ | cut -f1)" >> $GITHUB_STEP_SUMMARY

# Lighthouse 性能检查已移除 - 如需要可以单独运行或在需要时重新添加